// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  orders Order[] @relation("orders")
  transactions Transaction[] @relation("transactions")
}

model Order {
  id        String   @id @default(uuid())
  order_id  Int @unique
  sku    String
  status    String
  amount    String
  invoice_id String?
  amount_without_discount String
  currency  String
  mode String @default("sandbox")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User? @relation("orders", fields: [userId], references: [id])
  userId String?
  items OrderItem[] @relation("orderitems")
}

model OrderItem {
  id        String   @id @default(uuid())
  sku    String
  quantity Int
  amount    String
  amount_without_discount String
  currency  String
  order Order? @relation("orderitems", fields: [orderId], references: [id])
  orderId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        String   @id @default(uuid())  

  transaction_id Int
  payment_method_order_id  String
  dry_run Int
  agreement Int
  payment_date DateTime
  payment_method Int
  payment_method_name String

  amount    Float
  currency  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation("transactions", fields: [userId], references: [id])
  userId String?
}